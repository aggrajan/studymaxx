/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/8IszUGEDIeo
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Arimo } from 'next/font/google'

arimo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import Link from "next/link";
import { Pagination, PaginationContent, PaginationItem, PaginationPrevious, PaginationLink, PaginationNext } from "@/components/ui/pagination";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "../ui/button";
import { ItemCard } from "./item-card";

export function ExploreBooks() {
  const [books, setBooks] = useState([
    {
      id: 1,
      title: "The Great Gatsby",
      cover: "/placeholder.svg",
      authors: ["ABC", "Dr. R. S. Aggarwal"],
      price: 1499
    },
    {
      id: 2,
      title: "To Kill a Mockingbird",
      cover: "/placeholder.svg",
      authors: ["ABC", "Dr. R. S. Aggarwal"],
      price: 1499
    },
    {
      id: 3,
      title: "1984",
      cover: "/placeholder.svg",
      authors: ["ABC", "Dr. R. S. Aggarwal"],
      price: 1499
    },
    {
      id: 4,
      title: "Pride and Prejudice",
      cover: "/placeholder.svg",
      authors: ["ABC", "Dr. R. S. Aggarwal"],
      price: 1499
    },
    {
      id: 5,
      title: "The Catcher in the Rye",
      cover: "/placeholder.svg",
      authors: ["ABC", "Dr. R. S. Aggarwal"],
      price: 1499
    },
    {
      id: 6,
      title: "The Lord of the Rings",
      cover: "/placeholder.svg",
      authors: ["ABC", "Dr. R. S. Aggarwal"],
      price: 1499
    },
    {
      id: 7,
      title: "Harry Potter and the Sorcerer's Stone",
      cover: "/placeholder.svg",
      authors: ["ABC", "Dr. R. S. Aggarwal"],
      price: 1499
    },
    {
      id: 8,
      title: "The Hobbit",
      cover: "/placeholder.svg",
      authors: ["ABC", "Dr. R. S. Aggarwal"],
      price: 1499
    },
    {
      id: 9,
      title: "The Hunger Games",
      cover: "/placeholder.svg",
      authors: ["ABC", "Dr. R. S. Aggarwal"],
      price: 1499
    },
    {
      id: 10,
      title: "The Kite Runner",
      cover: "/placeholder.svg",
      authors: ["ABC", "Dr. R. S. Aggarwal"],
      price: 1499
    },
    {
      id: 11,
      title: "The Book Thief",
      cover: "/placeholder.svg",
      authors: ["ABC", "Dr. R. S. Aggarwal"],
      price: 1499
    },
    {
      id: 12,
      title: "The Fault in Our Stars",
      cover: "/placeholder.svg",
      authors: ["ABC", "Dr. R. S. Aggarwal"],
      price: 1499
    },
    {
      id: 13,
      title: "The Kite Runner",
      cover: "/placeholder.svg",
      authors: ["ABC", "Dr. R. S. Aggarwal"],
      price: 1499
    },
    {
      id: 14,
      title: "The Book Thief",
      cover: "/placeholder.svg",
      authors: ["ABC", "Dr. R. S. Aggarwal"],
      price: 1499
    },
    {
      id: 15,
      title: "The Fault in Our Stars",
      cover: "/placeholder.svg",
      authors: ["ABC", "Dr. R. S. Aggarwal"],
      price: 1499
    }
  ])
  const [currentPage, setCurrentPage] = useState(1)
  const booksPerPage = 8
  const totalPages = Math.ceil(books.length / booksPerPage)
  const indexOfLastBook = currentPage * booksPerPage
  const indexOfFirstBook = indexOfLastBook - booksPerPage
  const currentBooks = books.slice(indexOfFirstBook, indexOfLastBook)
  const [searchTerm, setSearchTerm] = useState("")
  const [filterGenre, setFilterGenre] = useState("")
  const handlePageChange = (page: any) => {
    setCurrentPage(page)
  }
  // const filteredBooks = books.filter((book) => {
  //   const titleMatch = book.title.toLowerCase().includes(searchTerm.toLowerCase())
  //   const genreMatch = filterGenre ? book.genre === filterGenre : true
  //   return titleMatch && genreMatch
  // })
  const uniqueGenres = ["Mathematics", "Competitve Exams"]
  return (
    <section className="pt-12 md:pt-24 lg:pt-32 bg-background">
      <div className="container px-4 md:px-6 gap-8 pb-4">
        <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl">Explore Our Products</h2>
        <p className="max-w-[700px] text-muted-foreground md:text-xl">
          Discover our top-selling and most popular books across various genres.
        </p>
      </div>
      <div className="container px-4 md:px-6 grid md:grid-cols-[250px_1fr] gap-8">
        <div className="flex flex-col gap-4">
          <Card>
            <CardHeader>
              <CardTitle>Search for books by title.</CardTitle>
            </CardHeader>
            <CardContent>
              <Input
                type="search"
                placeholder="Enter title..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
              <Button className="mt-2 bg-blue-500 border" >Search</Button>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Filter books by Subjects.</CardTitle>
            </CardHeader>
            <CardContent>
              {uniqueGenres.map((genre, index) => (<div className="flex items-center space-x-2 my-2" key={`a_${index}`}>
                <Checkbox id={genre} />
                <label
                htmlFor={genre}
                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                  {genre}
                </label>
                </div>
              ))}
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Filter books by Board.</CardTitle>
            </CardHeader>
            <CardContent>
              {uniqueGenres.map((genre, index) => (<div className="flex items-center space-x-2 my-2" key={`b_${index}`}>
                <Checkbox id={genre} />
                <label
                htmlFor={genre}
                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                  {genre}
                </label>
                </div>
              ))}
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Filter books by Class.</CardTitle>
            </CardHeader>
            <CardContent>
              {uniqueGenres.map((genre, index) => (<div className="flex items-center space-x-2 my-2" key={`c_${index}`}>
                <Checkbox id={genre} />
                <label
                htmlFor={genre}
                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                  {genre}
                </label>
                </div>
              ))}
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Filter books by Language.</CardTitle>
            </CardHeader>
            <CardContent>
              {uniqueGenres.map((genre, index) => (<div className="flex items-center space-x-2 my-2" key={`d_${index}`}>
                <Checkbox id={genre} />
                <label
                htmlFor={genre}
                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                  {genre}
                </label>
                </div>
              ))}
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Filter books by Type of Book.</CardTitle>
            </CardHeader>
            <CardContent>
              {uniqueGenres.map((genre, index) => (<div className="flex items-center space-x-2 my-2" key={`e_${index}`}>
                <Checkbox id={genre} />
                <label
                htmlFor={genre}
                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                  {genre}
                </label>
                </div>
              ))}
            </CardContent>
          </Card>
        </div>
        <div className="flex flex-col">
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6">
            {currentBooks.map((book, index) => (
              <ItemCard key={`book_${book.id}`} title={book.title} authors={book.authors} price={book.price} cover={book.cover} />
            ))}
          </div>
          <div className="container px-4 md:px-6 mt-8">
            <Pagination>
              <PaginationContent>
                <PaginationItem>
                  <PaginationPrevious
                    className={`hover:cursor-pointer ${currentPage <= 1 ? "pointer-events-none opacity-50" : ""}`}
                    onClick={(e) => {e.preventDefault(); handlePageChange(currentPage - 1);}}
                    aria-disabled={currentPage <= 1}
                    tabIndex={currentPage <= 1 ? -1 : undefined}
                  />
                </PaginationItem>
                {Array.from({ length: totalPages }, (_, i) => i + 1).map((page, index) => (
                  <PaginationItem key={`page_${index}`}>
                    <PaginationLink className="hover:cursor-pointer" onClick={(e) => {e.preventDefault(); handlePageChange(page);}} isActive={page === currentPage}>
                      {page}
                    </PaginationLink>
                  </PaginationItem>
                ))}
                <PaginationItem>
                  <PaginationNext
                    className={`hover:cursor-pointer ${currentPage >= totalPages ? "pointer-events-none opacity-50" : ""}`}
                    onClick={(e) => {e.preventDefault(); handlePageChange(currentPage + 1);}}
                    aria-disabled={currentPage >= totalPages}
                    tabIndex={currentPage >= totalPages ? -1 : undefined}
                  />
                </PaginationItem>
              </PaginationContent>
            </Pagination>
          </div>
        </div>
        
      </div>
      
      
    </section>
  )
}
