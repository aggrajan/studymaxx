/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/zYU218vymJr
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'
import { Rubik } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

rubik({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Separator } from "@/components/ui/separator"

export function CartPage() {
  const cartItems = [
    {
      id: 1,
      image: "/placeholder.svg",
      title: "The Great Gatsby",
      author: "F. Scott Fitzgerald",
      quantity: 2,
      price: 14.99,
    },
    {
      id: 2,
      image: "/placeholder.svg",
      title: "To Kill a Mockingbird",
      author: "Harper Lee",
      quantity: 1,
      price: 12.99,
    },
    {
      id: 3,
      image: "/placeholder.svg",
      title: "Pride and Prejudice",
      author: "Jane Austen",
      quantity: 3,
      price: 9.99,
    },
  ]
  const [cart, setCart] = useState(cartItems)
  const removeFromCart = (id: number) => {
    setCart(cart.filter((item) => item.id !== id))
  }
  const updateQuantity = (id: number, quantity: number) => {
    setCart(cart.map((item) => (item.id === id ? { ...item, quantity } : item)))
  }
  const total = cart.reduce((acc, item) => acc + item.price * item.quantity, 0)
  const shipping = 5.99
  const discount = 10
  return (
      <main className="flex-1 py-12 px-2 md:px-4 mt-16">
        <div className="container mx-auto grid gap-8 md:grid-cols-[2fr_1fr]">
          <div>
            <h1 className="text-2xl font-bold mb-4">Your Cart</h1>
            <div className="grid gap-6">
              {cart.length > 0 ? cart.map((item) => (
                <div key={item.id} className="grid grid-cols-[100px_1fr_auto] items-center gap-4">
                  <img
                    src="/placeholder.svg"
                    alt={item.title}
                    width={100}
                    height={150}
                    className="rounded-md object-cover"
                  />
                  <div>
                    <h3 className="font-semibold">{item.title}</h3>
                    <p className="text-muted-foreground">{item.author}</p>
                    <p className="text-black">&#8377;{item.price}</p>
                  </div>
                  <div className="flex items-center flex-col sm:flex-row gap-4">
                    <div className="flex items-center gap-2">
                      <Button
                        variant="outline"
                        size="icon"
                        onClick={() => updateQuantity(item.id, item.quantity - 1)}
                        disabled={item.quantity === 1}
                      >
                        <MinusIcon className="h-4 w-4" />
                      </Button>
                      <span>{item.quantity}</span>
                      <Button variant="outline" size="icon" onClick={() => updateQuantity(item.id, item.quantity + 1)}>
                        <PlusIcon className="h-4 w-4" />
                      </Button>
                    </div>
                    <Button variant="outline" size="icon" onClick={() => removeFromCart(item.id)}>
                      <TrashIcon className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              )) : <div className="flex justify-center items-center">Your cart is empty</div>}
            </div>
          </div>
          <div className="bg-muted p-6 rounded-lg h-fit">
            <h2 className="text-xl font-bold mb-4">Order Summary</h2>
            <div className="grid gap-2">
              <div className="flex justify-between">
                <span>Subtotal</span>
                <span>&#8377;{total.toFixed(2)}</span>
              </div>
              <div className="flex justify-between">
                <span>Shipping</span>
                <span>&#8377;{cart.length > 0 ? shipping.toFixed(2): 0}</span>
              </div>
              <div className="flex justify-between">
                <span>Discount</span>
                <span>-&#8377;{cart.length > 0 ? discount.toFixed(2) : 0}</span>
              </div>
              <Separator />
              <div className="flex justify-between font-bold">
                <span>Total</span>
                <span>${(total + (cart.length > 0 ? shipping : 0) -  (cart.length > 0 ? discount : 0)).toFixed(2)}</span>
              </div>
            </div>
            <Button className={`w-full mt-6 ${cart.length > 0 ? "cursor-pointer" : "cursor-not-allowed"}`} disabled={cart.length === 0}>Proceed to Checkout</Button>
          </div>
        </div>
      </main>
  )
}

function BookIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20" />
    </svg>
  )
}


function MinusIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
    </svg>
  )
}


function PlusIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  )
}


function TrashIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 6h18" />
      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
    </svg>
  )
}


function XIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  )
}
