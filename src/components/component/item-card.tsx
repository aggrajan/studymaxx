/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/Ei51Tewh6Nb
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/
"use client"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { useState } from "react"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { ProductDetails } from "./product-details";
import { TabView } from "./tab-view";
import { Reviews } from "./reviews";
import { OtherProductsYouMayFindUseful } from "./other-products-you-may-find-useful";
import { Book } from "@/model/Books";
import { addItemQuantity, ICartItem, removeCartItem, subtractItemQuantity } from "@/lib/slices/cartSlice";
import { useAppDispatch, useAppSelector } from "@/lib/hooks";
import { addCartItem } from "@/lib/slices/cartSlice";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "../ui/tooltip"
import { Badge } from "../ui/badge"
import { useEffect } from "react"
import { useToast } from "../ui/use-toast"

export function ItemCard({ title, authors, price, cover, book } : { title: string, authors: string[], price: number, cover: string, book: Book}) {
  const dispatch = useAppDispatch();
  const { cartItems } = useAppSelector((state) => state.cart);
  function getAuthors(authors: string[]): string {
    return authors.join(", ");
  }
  const { toast } = useToast();
  const [addedToCart, setAddedToCart] = useState(false);
  const cartItem: ICartItem = {
    quantity: 1,
    product: book
  }

  useEffect(() => {
    if(getQuantity() > 0) setAddedToCart(true);
  }, [])

  function getQuantity(): number {
    if(!book) return 0;
    const cartIndex = cartItems.findIndex((cartItem) => cartItem.product._id === book._id);
    if(cartIndex === -1) return 0;
    return cartItems[cartIndex].quantity
  }

  function getTruncatedTitle(title: string): string {
    return title.length > 50 ? title.substring(0, 50) + "..." : title;
  }

  function getPercetageOff(originalPrice: number, discountedPrice: number) {
    return (100.0 * ((originalPrice - discountedPrice) / originalPrice));
  }

  return (
    <Card className="w-full max-w-sm">
      <Dialog>
        <DialogTrigger asChild>
          <img src={cover} alt="Book Image" className="object-cover mb-2 w-full h-[20rem] md:h-[22rem] lg:h-[25rem] xl:h-[30rem] hover:shadow-xl cursor-pointer rounded-t-lg transition-all hover:scale-[103%]" />
        </DialogTrigger>
        <DialogContent className="min-w-[85%] my-16" onOpenAutoFocus={(e) => {e.preventDefault()}}>
          {/* <ScrollArea className="rounded-md border">
            <div className="p-0 sm:p-2"> */}
                <ProductDetails isModal={true} book={book} getAuthors={getAuthors} addedToCart={addedToCart} setAddedToCart={setAddedToCart} getQuantity={getQuantity} />
                <TabView />
                <Reviews />
                <OtherProductsYouMayFindUseful />
            {/* </div>
          </ScrollArea> */}
        </DialogContent>
      </Dialog>
      
      <CardContent className="flex flex-col items-center">
        <TooltipProvider delayDuration={100}>
          <Tooltip>
            <TooltipTrigger asChild>
                <div className="text-md lg:text-lg font-semibold min-h-20 text-center">{getTruncatedTitle(title)}</div>
            </TooltipTrigger>
            <TooltipContent>
              <p className="text-wrap">{title}</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        
        <div className="text-xs md:text-sm text-muted-foreground mb-2 text-center min-h-8">{getAuthors(authors)}</div>
        
        <div className="flex items-center justify-start gap-4">
          {book && book.discountedPrice && book.discountedPrice > 0 && <div className="text-2xl font-bold text-primary">&#8377;{book.discountedPrice}</div>}
          <div className={`${book && book.discountedPrice && book.discountedPrice > 0 ? "text-xl font-bold text-muted-foreground line-through": "text-2xl font-bold text-primary"}`}>&#8377;{price}</div>
          {book && book.discountedPrice && book.discountedPrice > 0 && <Badge variant="default">
            {getPercetageOff(price, book.discountedPrice).toFixed(1)}% OFF
          </Badge>}
        </div>
        
        {!addedToCart && <div className="flex space-x-4 mt-2">
          <Button variant="ghost" size="icon">
            <HeartIcon className="w-6 h-6" />
          </Button>
          <Button variant="ghost" size="icon" onClick={() => { dispatch(addCartItem(cartItem)); toast({title: "Added to Cart", description: "One item successfully added to cart"}); setAddedToCart((prev) => !prev)}} >
            <ShoppingCartIcon className="w-6 h-6" />
          </Button>
        </div>}
        {addedToCart && <div className="flex items-center flex-col sm:flex-row gap-4 mt-2">
          <div className="flex items-center gap-2">
            <Button
              variant="outline"
              size="icon"
              onClick={() => { dispatch(subtractItemQuantity({ id: book._id as number})) }}
              disabled={getQuantity() === 1}
            >
              <MinusIcon className="h-4 w-4" />
            </Button>
            <span>{getQuantity()}</span>
            <Button variant="outline" size="icon" onClick={() => { dispatch(addItemQuantity({ id: book._id as number})) }}>
              <PlusIcon className="h-4 w-4" />
            </Button>
          </div>
        </div>}
      </CardContent>
    </Card>
  )
}

function HeartIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z" />
    </svg>
  );
}


function ShoppingCartIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="8" cy="21" r="1" />
      <circle cx="19" cy="21" r="1" />
      <path d="M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12" />
    </svg>
  );
}


function XIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  );
}

function MinusIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
    </svg>
  )
}


function PlusIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  )
}


function TrashIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 6h18" />
      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
    </svg>
  )
}